#!/usr/bin/env bash
#################################################################
#                                                               #
#    Proton-GE-Custom downloader and installer - proton-get     #
#                         Version: 2.1.1                        #
#                       Copyright (C) 2021                      #
#           Marcelo dos Santos Mafra <msmafra@gmail.com>        #
#       Licensed under the GNU General Public License v3.0      #
#                                                               #
#           https://gitlab.com/msmafra/proton-get               #
#                                                               #
#################################################################
# Disable unicode.
LC_ALL=C
LANG=C
#{{{ Bash settings
set -o errexit
set -o errtrace
set -o nounset
set -o pipefail
# set -o xtrace
#}}}

declare ge_proton_title
declare which_arg
export PROTONGET_VERSION
export SCRIPT_FOLDER
export CURRENT_USER_BIN
declare -i user_id
declare user_name
declare temp_dir
declare notify_send
declare exec_xidel
declare steam_tools_folder
declare ge_git_url
declare ge_releases_url
declare ge_latest_url
declare ge_proton_file
declare ge_proton_remote_version
declare ge_proton_local_version
declare ge_author
declare ge_discord_url

ge_proton_title="Proton-GE-Custom"
which_arg="${1:-}"
PROTONGET_VERSION="2.1.1"
SCRIPT_FOLDER="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"
CURRENT_USER_BIN="${HOME}/.local/bin"
user_id="$(id --user)"
user_name="$(id --user --name)"
temp_dir="$(mktemp --directory --suffix="${ge_proton_title}" | tee /dev/null 2>&1)"
notify_send="$(command -v notify-send | tee /dev/null 2>&1)"
exec_xidel="${HOME}/.local/bin/xidel"
steam_tools_folder="${HOME}/.local/share/Steam/compatibilitytools.d"
ge_git_url="https://github.com/GloriousEggroll/proton-ge-custom"
ge_releases_url="${ge_git_url}/releases"
ge_latest_url="$("${exec_xidel}" -s "${ge_releases_url}" --xquery '//a/@href[contains(., ".tar.gz")]' | grep "releases" | awk '{printf "%s%s\n","https://github.com", $1}' | head -n 1)"
ge_proton_file="$(printf "%s" "${ge_latest_url}" | awk -F"/" '{print $9}')"
ge_proton_remote_version="${ge_proton_file%%.tar*}"
ge_proton_local_version="$(find "${steam_tools_folder}/" -maxdepth 1 -name '*Proton*' -type d | awk -F"/" '{print $8}' | sort --version-sort --reverse | head --lines=1)"
ge_author="GloriousEggroll"
ge_discord_url="https://discord.gg/6y3BdzC"

exit_stage_left() {

    unset -v ge_proton_title which_arg PROTONGET_VERSION SCRIPT_FOLDER CURRENT_USER_BIN user_id user_name temp_dir notify_send exec_xidel steam_tools_folder ge_git_url ge_releases_url ge_latest_url ge_proton_file ge_proton_remote_version ge_proton_local_version ge_author ge_discord_url raw_file available_version script_mode xidel_exec local xidel_url xidel_file ge_count
    unset -f check_xidel show_version show_usage self_update check_update run_protonget main
    printf "%s\n" "All done. Bye!"

}

main() {

    printf "%s: %s\n" "-> Argument" "${which_arg:-None}"

    if [[ "${user_id}" -ne 0 ]];then

        if [[ "${which_arg}" =~ -c|--check ]];then

            show_version
            check_update
            exit 0

        elif [[ "${which_arg}" =~ -i|--install|-n|--dryrun ]];then

            if [[ "${which_arg}" =~ -n|--dryrun ]];then

                printf "%s\n\n" "-> Dry Run Mode"

            fi

            show_version
            run_protonget
            exit 0

        elif [[ "${which_arg}" =~ -v|--version ]];then

            show_version
            exit 0

        elif [[ "${which_arg}" =~ -u|--update ]];then

            show_version
            self_update
            exit 0

        else

            show_version
            show_usage
            exit 0

        fi

    else

        printf "%s\n" "-> Usage of superuser (elevated privileges), is not allowed. Exiting."
        exit 1

    fi

    trap exit_stage_left ERR 0 SIGHUP SIGINT SIGQUIT SIGABRT SIGTERM # Elegant exit

}

check_xidel() {

    local xidel_url
    local xidel_file

    if [[ ! -f "${exec_xidel}" ]];then

        # Required
        cd "${temp_dir}" && pwd
        xidel_url="https://github.com/benibela/xidel/releases/download/Xidel_0.9.8/xidel-0.9.8.linux64.tar.gz"
        xidel_file="$(printf "%s" "https://github.com/benibela/xidel/releases/download/Xidel_0.9.8/xidel-0.9.8.linux64.tar.gz" | awk -F"/" '{print $9}')"

        printf "%s\n- %s\n- %s\n" "Xidel not found. Info:" "http://www.videlibri.de/xidel.html" "by Benito van der Zander <benito@benibela.de>"

        printf "%s %s\n" "Downloading xidel 0.9.8 (latest stable at 2021-06-28) to a temporary directory" "${temp_dir}"
        cd "${temp_dir}" && pwd
        wget --quiet --content-disposition --continue "${xidel_url}"

        printf "\n%s\n" "-> Extracting files to ${temp_dir}"
        cd "${temp_dir}" && pwd
        tar --get --file "${xidel_file}" --directory="${temp_dir}"

    elif [[ -f "${HOME}"/.local/bin/xidel ]];then

        printf "%s\n%s%s\n" "-> An installed version of xidel found locally" "-> Using from" "${exec_xidel}"

    else

        exec_xidel="${temp_dir}/xidel"
        printf "\n-> xidel found. using from %s" "${exec_xidel}"

    fi

}

show_version() {

    local xidel_exec

    printf "%s Installed version of proton-get: %s\n\n" "->" "${PROTONGET_VERSION}"

    if [[ "$(command -v xidel > /dev/null 2>&1)" ]];then
        xidel_exec="$(command -v xidel > /dev/null 2>&1)"
        "${xidel_exec}" --version
    fi

}

show_usage() {

    printf "%s\n" "${ge_proton_title} downloader and installer: proton-get"
    printf "\n%s\n" "Usage: $0 [argument]"
    printf "\t%s\n" "-i or --install will download and extract ${ge_proton_title}"
    printf "\t%s\n" "-c or --check will just check for a new version of ${ge_proton_title}"
    printf "\t%s\n" "-n or --dryrun  will run proton-get without downloading and installing anything"
    printf "\t%s\n" "-u or --update will check and install the latest version of proton-get"
    printf "\t%s\n" "-v or --version will show the current proton-get version"

}

self_update() {

    local raw_file
    local available_version
    local script_mode

    raw_file="https://gitlab.com/msmafra/proton-get/-/raw/master/proton-get"
    available_version="$(curl --silent "${raw_file}" | tee /dev/null | grep --max-count=1 "PROTONGET_VERSION=" | awk -F'"' '{print $2}')"
    script_mode="740"

    printf "Installed version of proton-get: %s\n" "${PROTONGET_VERSION}"
    printf "Available version of proton-get: %s\n" "${available_version}"

    if [[ ! "${PROTONGET_VERSION//./}" -le "${available_version//./}" ]];then

        if [[ -d "${CURRENT_USER_BIN}" ]];then

            printf "%s %s\n" "-> Downloading " "${available_version}"
            cd "${CURRENT_USER_BIN}" && pwd
            \wget --quiet --show-progress --progress=bar --content-disposition --continue "${raw_file}"
            cd "${CURRENT_USER_BIN}" && pwd
            install --verbose -D -C --mode="${script_mode}" --owner="${user_name}" --group="${user_name}" "${SCRIPT_FOLDER}"/proton-get --target-directory="${CURRENT_USER_BIN}"
            exit 0

        fi

    else

        printf "%s\n" "Can't be updated."

    fi

}

check_update() {


    if [[ "${which_arg}" =~ -c|--check ]];then

        if [[ ! ${ge_proton_remote_version} = "${ge_proton_local_version}" ]];then

            printf "\n-> A new %s release is available: %s \n%s \n" "${ge_proton_title}" "${ge_proton_remote_version}" "${ge_latest_url}"

            if [[ -e "${notify_send}" ]];then

                printf "Available version of proton-get: %s\n" "${ge_proton_remote_version}"
                "${notify_send}" --urgency=critical "Proton Get" "A new ${ge_proton_title} release is available: ${ge_proton_remote_version}" -i 'dialog-warning'

            else

                printf "Available version of proton-get: %s\n" "${ge_proton_remote_version}"

            fi

        else

            printf "No new version available. Your latest installed version %s.\n" "${ge_proton_local_version}"

        fi
    fi

}

run_protonget() {

    local -i ge_count
    ge_count=5

    printf "%s is a modified version of Valve's Proton by GloriousEggroll.\n%s" "${ge_proton_title}" "GloriousEggroll's description: Compatibility tool for Steam Play based on Wine and additional components"
    printf "\nCheck the docs etc at %s." "${ge_git_url}"
    printf "\nFor %s issues, bugs report to %s via Discord: %s\n"  "${ge_proton_title}" "${ge_author}" "${ge_discord_url}"

    # Available ones
    printf "\n%s Available %s releases (%s):\n" "->" "${ge_proton_title}" "${ge_count}"
    # "${exec_xidel}" --silent "${ge_releases_url}" --xquery '//a/@href[contains(., ".tar.gz")]' | grep "releases" | awk '{printf "%s%s\n","https://github.com", $1}' | awk -F"/" '{print $9}' | grep --invert-match "test" | awk -F"." '{print $1"."$2}'
    "${exec_xidel}" --silent "${ge_releases_url}" --xquery '//a/@href[contains(., ".tar.gz")]' | grep "releases" | awk '{printf "%s%s\n","https://github.com", $1}' | awk -F"/" '{print $9}' | grep --invert-match "test" | awk -F"." '{printf "\t%s.%s\n",$1,$2}'

    # Current installed ones
    printf "\n-> Installed %s releases:\n" "${ge_proton_title}"
    find "${steam_tools_folder}/" -maxdepth 1 -name '*Proton*' -type d | awk -F"/" '{printf "\t%s\n",$8}' | sort --version-sort --reverse

    # Check if is already installed before download
    if [[ ! ${ge_proton_remote_version} = "${ge_proton_local_version}" ]];then
        cd "${temp_dir}" && pwd

        printf "\n%s A new %s release is available: %s \n%s \n" "->" "${ge_proton_title}" "${ge_proton_remote_version}" "${ge_latest_url}"
        printf "\n%s \n%s %s\n" "-> Downloading using:" "wget --quiet --show-progress --progress=bar --content-disposition --continue " "${ge_latest_url}"
        if [[ ! "${which_arg}" =~ -n|--dryrun ]];then
            wget --quiet --show-progress --progress=bar --content-disposition --continue "${ge_latest_url}"
        fi

        printf "\n-> Extracting using:\ntar --get --file %s --directory=%s\n" "${ge_proton_file}" "${steam_tools_folder}"
        if [[ ! "${which_arg}" =~ -n|--dryrun ]];then
            tar --get --file "${ge_proton_file}" --directory="${steam_tools_folder}"
        fi

        printf "\n%s was extracted/installed into %s\n" "-> ${ge_proton_file}" "${steam_tools_folder}"
        printf "%s (%s) %s\n" "-> All files were downloaded to the temporary folder" "${temp_dir}" "before being installed."

    else

        printf "\n%s is the most recent one installed\n" "${ge_proton_file/%.tar.gz/}"

    fi

}

main "${@}"
